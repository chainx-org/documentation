<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>ChainX 文档 – 资产转接桥/网关（2.0中称为资产网关Gateway）</title><link>https://liuchengxu.github.io/documentation/zh/docs/bridges/</link><description>Recent content in 资产转接桥/网关（2.0中称为资产网关Gateway） on ChainX 文档</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://liuchengxu.github.io/documentation/zh/docs/bridges/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: 信托</title><link>https://liuchengxu.github.io/documentation/zh/docs/bridges/trustee/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://liuchengxu.github.io/documentation/zh/docs/bridges/trustee/</guid><description>
&lt;h2 id="介绍">介绍&lt;/h2>
&lt;p>信托存在的意义为对于跨链而言，若ChainX可以支持被跨链（如Bitcoin）的轻节点验证，而被跨链无法支持ChainX的轻节点验证，则只能进行单向跨链（单向Relay）。因此能够双向跨链的链不需要信托，只有单向跨链的链需要信托。&lt;strong>信托是对于无法双向跨链的一种妥协方案。&lt;/strong>&lt;/p>
&lt;p>对于这种妥协方案需要具备很高的灵活性，很多细节无法在链上处理（如信托资质确认等），因此信托在某种程度上可以看做是需要一定信任的。因而ChainX的给予信托&lt;strong>极大的灵活性及权利&lt;/strong>&lt;/p>
&lt;p>因此对于单向跨链（如Bitcoin）而言，在被跨链端需要有一个地址/账户锁定（保存）需要跨链的资产，而&lt;strong>生成并操控&lt;/strong>这个地址/账户的相关人员，在ChainX中称为“信托”。&lt;/p>
&lt;p>&lt;strong>信托&lt;/strong>：是ChainX上托管对应链的代币的角色，因此信托是跨链代币的&lt;strong>真币托管者&lt;/strong>。因此信托的参与者必须经过严格的KYC进行验证并公布自己的节点信息，且在验证节点中排名靠前，以保证充足的利益绑定关系防止作恶。&lt;/p>
&lt;p>&lt;strong>信托的分类&lt;/strong>：信托以链为单位作为区分，如Bitcoin对应的信托只处理BTC，将来Ethereum若使用信托，则ETH，Ethereum上的ERC20代币都属于信托托管。&lt;/p>
&lt;p>&lt;strong>被跨链（原链）&lt;/strong>: 在ChainX上对跨链的称呼，比如Bitcoin。&lt;/p>
&lt;p>&lt;strong>被跨链（原链）代币&lt;/strong>在ChainX上对跨链过来在ChainX上的凭证的称呼，比如Bitcoin跨链到ChainX上，原链上的BTC被锁定到信托的多签地址中，在ChainX上会1:1兑换一个ChainX上的代币。&lt;/p>
&lt;p>&lt;strong>候选信托&lt;/strong>：在已经是节点的情况下将自己的信托信息注册于ChainX上，即是候选信托。&lt;/p>
&lt;p>&lt;strong>注册成为候选信托&lt;/strong>：由于确保跨链地址的安全性与公开性，一个账户（操作节点的实体）欲成为信托节点时，首先需要将自己注册为一个节点（候选节点、验证节点），然后才能将自己想要成为某条链（如Bitcoin）的信托的相关信息（热公钥/地址，冷公钥/地址）注册到ChainX上，称为&lt;strong>候选信托节点&lt;/strong>。&lt;/p>
&lt;p>&lt;strong>候选信托注册的信息&lt;/strong>：注册信托信息最核心部分需要具备&lt;strong>热公钥/地址，冷公钥/地址&lt;/strong>，其中热公钥/地址在链上参与生成热地址，冷公钥/地址在链上参与生成冷地址，热地址用于接受用户的跨链充值与执行跨链提现，当热地址保存数量交大后转移部分资金进入冷地址保管。&lt;/p>
&lt;p>&lt;strong>信托列表（群体）&lt;/strong>：从候选信托中选出部分节点可组成信托列表。对&lt;strong>真币托管的地址&lt;/strong>由当前的信托列表提供的相关信息热公钥/地址，冷公钥/地址）&lt;strong>在链上生成&lt;/strong>，该地址/账户一般为&lt;strong>多签（多重签名）地址/账户&lt;/strong>，对该地址/账户的操作需要当前信托列表中的大部分信托通过多签的形式操作。&lt;/p>
&lt;p>&lt;strong>信托换届（session）&lt;/strong>：信托列表存在更替行为，一轮信托列表称为“一届（session）”信托列表，信托列表的更替称为“信托换届”。ChainX的给予信托&lt;strong>极大的灵活性及权利&lt;/strong>，因此信托&lt;strong>只可由上一届信托列表选定下一届信托列表&lt;/strong>。&lt;/p>
&lt;p>&lt;strong>多签（多重签名）地址/账户&lt;/strong>：注意这个多签（多重签名）地址/账户是指对应被托管链上的地址（如Bitcoin的多签地址）。候选信托将自己的信托信息注册于链上后，当换届指定了新一届的信托后，ChainX根据新一届的信托列表在链上的信托信息，&lt;strong>自动生成&lt;/strong>当前届的多签（多重签名）地址/账户，在当前届内，需要这些信托在&lt;strong>用户提现&lt;/strong>时参与对对应链上的签名（多签）操作（如Bitcoin参与对待签原文的签名）。&lt;/p>
&lt;p>&lt;strong>信托列表处理用户提现&lt;/strong>：当前届的信托列表中的信托者应监控用户提现的申请列表，当用户可以提现时，当前届中的任意一个信托者可以根据用户的申请列表组件一个原链上的提现交易的原文（Bitcoin提现的待签原文）并发送到ChainX上，其他信托者在ChainX上对这提现原文进行签名（或否决这个提现），若签名数量达到多签要求，则这笔交易将会广播到原链上，并在ChainX被确认后销毁ChainX上对原链的跨链代币。&lt;/p>
&lt;p>&lt;strong>信托多签操作&lt;/strong>：注意这个多签指的是在ChainX上，与信托相关的一些操作需要通过ChainX链上的&lt;strong>多签投票决定&lt;/strong>，如更改Bitcoin用户提现手续费，上一届信托列表选定下一届信托表等。&lt;/p>
&lt;h2 id="首届信托节点">首届信托节点&lt;/h2>
&lt;p>第一届信托节点由测试网时期，经过良好训练的若干个节点组成，等待网络逐步稳定，新节点加入并熟悉后开始进行逐步换届。&lt;/p>
&lt;ul>
&lt;li>&lt;strong>热多签地址&lt;/strong> 用于接收用户日常的充值和提现&lt;/li>
&lt;li>如果热地址资金存余过多，则由信托节点们线下商量后打入 &lt;strong>冷多签地址&lt;/strong> 进行 &lt;strong>热转冷&lt;/strong> 存储&lt;/li>
&lt;li>如果遇到大笔提现，还可以进行 &lt;strong>冷转热&lt;/strong> 操作&lt;/li>
&lt;/ul>
&lt;h2 id="信托节点换届">信托节点换届&lt;/h2>
&lt;h4 id="下一届信托节点审核">下一届信托节点审核&lt;/h4>
&lt;ol>
&lt;li>
&lt;p>目前&lt;strong>拟定&lt;/strong>信托节点的换届周期是10天左右，首先排查验证节点中设置了Bitcoin链信托的节点，没设置的无权参与选举&lt;/p>
&lt;/li>
&lt;li>
&lt;p>然后取其中得票数最高的N个，随着系统成熟度发展，N从4逐步增长到15&lt;/p>
&lt;/li>
&lt;li>
&lt;p>由上一届信托节点审核这N个节点是否已经公开了自己的身份信息、是否有基本的节点和资金保管能力，防止出现恶意节点，从中筛选出M个。&lt;/p>
&lt;p>选定的最核心条件为保证下一届信托的可靠性 因此判定条件可以通过下面进行筛选，并经过当前届的信托列表的&lt;strong>信托多签操作&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>熟悉ChainX信托流程（重要）
&lt;ul>
&lt;li>具备一定运维能力，需要维护对应链的一个全节点&lt;/li>
&lt;li>对对应的区块链操作有深入理解（比如Bitcoin信托需要熟悉Bitcoin的多签地址操作的概念与流程，需要具备操控适合自己的Bitcoin多签的工具的开发能力）&lt;/li>
&lt;li>具备一定技术能力，能够根据ChainX SDK及其他需求开发适合自己的工具&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>节点愿意当选信托&lt;/li>
&lt;li>节点排名靠前&lt;/li>
&lt;li>节点抵押数较大且投票数较大&lt;/li>
&lt;li>节点能灵活操作冷热钱包，有冷钱包管理技术&lt;/li>
&lt;li>节点身份已知，且背后有较大利益关系背书（如公司，名望等）&lt;/li>
&lt;li>其他有效筛选条件&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h4 id="下一届信托节点准备">下一届信托节点准备&lt;/h4>
&lt;ol>
&lt;li>向社区公布该M个节点的的身份、各自的热公钥、各自的冷公钥&lt;/li>
&lt;li>通过&lt;strong>链上的接口模拟计算&lt;/strong>生成这M个节点的冷热多签地址&lt;/li>
&lt;li>向这两个多签地址分别打入小额的真实币用于测试&lt;/li>
&lt;li>M个节点组装生成 M/M 的全额多签签名，用于说明各自均会使用多签，并且私钥正确&lt;/li>
&lt;/ol>
&lt;p>其中对于3，4两步详细描述如下：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>当前届信托的冷热地址称为：cold-addr1，hot-addr1，下一届模拟生成的冷热地址称为：cold-addr2，hot-addr2。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>测试过程如下：&lt;/p>
&lt;ul>
&lt;li>cold-addr1 -&amp;gt; cold-addr2 (init, test cold addr could deposit)&lt;/li>
&lt;li>cold-addr2 -&amp;gt; hot-addr2 (test cold addr could withdrawal, and hot addr could deposit)&lt;/li>
&lt;li>hot-addr2 -&amp;gt; cold-addr2 (test hot addr could withdrawal)&lt;/li>
&lt;li>cold-addr2 -&amp;gt; cold-addr1 (optional, just return test BTC)&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://github.com/chainx-org/images/raw/master/trustees_addr_test.png" alt="img">&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h4 id="链上信托节点换届">链上信托节点换届&lt;/h4>
&lt;ol>
&lt;li>上一届信托节点发起ChainX多签交易，提交新一届信托节点的 ChainX账户地址，这些账户地址应该已经经过模拟测试，保证注册的信息是正常可用的，将要生成的地址或合约是可用的。&lt;/li>
&lt;li>完成ChainX系统内的换届，用户看到的充值目标地址和轻节点程序监听的地址会变更&lt;/li>
&lt;/ol>
&lt;h4 id="托管资金移交">托管资金移交&lt;/h4>
&lt;ol>
&lt;li>首先完成换届，此时链上的多签地址已经发生了替换&lt;/li>
&lt;li>上一批信托节点将两个老多签地址的资金，线下组织后打入新的两个多签地址，完成资金交接。&lt;/li>
&lt;li>换届资金转移完成&lt;/li>
&lt;/ol>
&lt;h2 id="信托多签操作">信托多签操作&lt;/h2>
&lt;p>由于信托为一个群体，在ChainX链上（注意非原链，请区分清楚）操作和信托相关的功能需要通过ChainX上的多签模块进行操作。&lt;/p>
&lt;p>信托也是一个多签操作群体。在ChainX链上，针对每一条链的每一届信托都根据信托列表生成了对应他们可以操作的信托多签地址。对于信托而言一般需要多签操作的功能如下：&lt;/p>
&lt;ul>
&lt;li>信托换届&lt;/li>
&lt;li>操控链的用户提现手续费&lt;/li>
&lt;li>撤销或修正用户的提现申请&lt;/li>
&lt;/ul>
&lt;h2 id="信托收益">信托收益&lt;/h2>
&lt;p>信托与普通验证者相比要承受更多的责任与义务，因此ChainX目前拟定给予信托的奖励有：&lt;/p>
&lt;ol>
&lt;li>以BTC为例：在信托换届后，本届信托内提现会留下很多用户提现的手续费结余，手续费结余在满足后续信托执行后剩余可由这届信托瓜分&lt;/li>
&lt;li>议会将拿出20%的收益奖励信托&lt;/li>
&lt;li>在钱包内ChainX将信托节点置顶排名，置顶有利于信托吸引更多的投票，增强自己的声誉&lt;/li>
&lt;/ol>
&lt;h2 id="信托相关操作">信托相关操作&lt;/h2>
&lt;p>TODO&lt;/p></description></item><item><title>Docs: 比特币转接桥/网关</title><link>https://liuchengxu.github.io/documentation/zh/docs/bridges/bitcoin/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://liuchengxu.github.io/documentation/zh/docs/bridges/bitcoin/</guid><description>
&lt;div class="pageinfo pageinfo-primary">
&lt;p>比特币转接桥/网关&lt;/p>
&lt;/div>
&lt;h2 id="介绍">介绍&lt;/h2>
&lt;p>比特币转接桥/网关是ChainX上实现比特币资产跨链的模块。&lt;/p>
&lt;p>对于Bitcoin链而言，ChainX采用&lt;/p>
&lt;ul>
&lt;li>比特币轻节点验证（SPV）保证比特币的充值及提现确认过程安全性&lt;/li>
&lt;li>比特币多签锁定持有比特币资产及由多签私钥持有者控制比特币提现&lt;/li>
&lt;/ul>
&lt;p>总结而言，ChainX对于Bitcoin链采用“单向轻节点验证，多签控制原链资产”的模型。&lt;/p>
&lt;h2 id="术语">术语&lt;/h2>
&lt;blockquote>
&lt;p>比特币轻节点验证：采用比特币轻节点验证逻辑，才有比特币块头的情况下通过默克尔证明验证交易真实存在。&lt;/p>
&lt;p>比特币多签：在比特币链上采用多签脚本的模式，实现比特币上的多重签名技术。&lt;/p>
&lt;p>比特币信托：在ChainX链上注册并持有比特币多签私钥的角色，由信托候选者经过信托换届后可成为比特币信托。&lt;/p>
&lt;p>比特币信托候选者：首先必须是ChainX验证者，然后将一组冷热公钥注册到ChainX链上后即可成为比特币信托候选者。&lt;/p>
&lt;p>比特币信托换届：从上一届信托指定下一个信托，并在ChainX链上信托多签投票后通过决定下一届信托并产生信托多签地址的过程。&lt;/p>
&lt;p>比特币多签地址：在信托换届时由信托们注册的冷热公钥根据比特币多签脚本生成的冷热地址。&lt;/p>
&lt;p>信托多签：当前届的信托在ChainX链上有一个多签地址，信托通过该多签地址可以进行一些决议，如信托缓解，设置比特币提现手续费等&lt;/p>
&lt;p>比特币Relay：一个链外程序，将比特币区块头及涉及与ChainX相关的比特币的交易提交到ChainX链上。&lt;/p>
&lt;/blockquote>
&lt;h2 id="比特币轻节点验证">比特币轻节点验证&lt;/h2>
&lt;p>ChainX在Runtime环境内实现了一个完全的比特币轻节点验证逻辑模块，该逻辑模块从某个比特币块高开始（genesis时决定），接受后续高度的比特币区块，并拥有切换“最重工作量证明链”的功能。因此若Bitcoin链上产生的最新区块被比特币Relay正常提交到ChainX上后，比特币转接桥就是具备了一份Bitcoin区块头信息的拷贝，拥有比特币的可验证的元数据。&lt;/p>
&lt;p>比特币转接桥中的轻节点验证逻辑将会验证比特币块头：&lt;/p>
&lt;ul>
&lt;li>父hash存在性&lt;/li>
&lt;li>工作量证明&lt;/li>
&lt;li>时间范围&lt;/li>
&lt;/ul>
&lt;p>等SPV应该具备的验证逻辑，同时具备与Bitcoin链相同的最重工作量证明下的确认逻辑，假设确认数是m，在接受了第n个块头后，会将第n-m+1个区块标记为确认，参见：&lt;/p>
&lt;p>&lt;img src="https://user-images.githubusercontent.com/5023721/56464998-bd10ae80-6427-11e9-877a-e01727c24a81.png" alt="bitcoin confirm">&lt;/p>
&lt;p>在比特币转接桥中，只接受外部提交的比特币区块头数据，而验证数据是否合法与轻节点业务逻辑均在ChainX的Runtime中独立运行决策，不受外部影响。&lt;/p>
&lt;p>因此在ChainX中的比特币轻节点的验证与确认区块逻辑是&lt;/p>
&lt;p>&lt;img src="https://user-images.githubusercontent.com/5023721/93670592-078bd400-facf-11ea-80a1-aa1be583baa9.jpg" alt="ChainX_Bitcoin_bridge">&lt;/p>
&lt;p>在ChainX 1.0 中，与ChainX相关的比特币交易可以先提交到转接后，再等待到比特币区块头确认后执行交易处理流程，而在ChainX 2.0简化了这一过程，只允许提交在ChainX链上已经确认的区块头之前的比特币交易，在还未确认的区块头下的比特币交易不允许提交。&lt;/p>
&lt;h2 id="多签管理及信托">多签管理及信托&lt;/h2>
&lt;p>&lt;strong>在ChainX链中，持有多签私钥的角色称为“信托(trustee)”&lt;/strong>。信托主要负责管理资产安全及处理比特币提现申请。&lt;/p>
&lt;p>信托在ChainX链上需要处理的主要流程为处理提现，执行流程如下：&lt;/p>
&lt;ol>
&lt;li>信托周期性根据ChainX链上的提现申请组建比特币提现交易并发送到ChainX链的比特币转接桥；&lt;/li>
&lt;li>比特币转接桥根据信托的提现请求锁定对应提现申请；&lt;/li>
&lt;li>信托根据ChainX链上的比特币交易原文进行比特币多签签名；&lt;/li>
&lt;li>当最后一个多签签名完成后，比特币提现交易会被Relay提交到比特币网络中；&lt;/li>
&lt;li>待比特币网络打包后，Relay发现信托提交的比特币提现交易，将提现交易发送到ChainX链的比特币转接桥；&lt;/li>
&lt;li>比特币转接桥通过轻节点方案验证提现交易有效性，销毁在ChainX链上对应的提现申请及X-BTC代币。&lt;/li>
&lt;/ol>
&lt;p>另一方面信托需要根据已经充值到ChainX的热地址的余额，周期性移动热冷地址中的比特币以保证比特币锁定在多签地址中的安全性。移动热冷地址的比特币交易可以被Relay提交到比特币转接桥中，但是不会有特别处理。&lt;/p>
&lt;p>关于多签及信托的更多内容请参见 &lt;a href="../Trustee">信托&lt;/a>&lt;/p>
&lt;h2 id="比特币转接桥业务逻辑">比特币转接桥业务逻辑&lt;/h2>
&lt;p>由以上介绍可知，比特币转接桥采用了单向Relay加信托多签的模式维护比特币转接桥的比特币跨链过程。因此总体的比特币转接桥业务逻辑如下图所示：&lt;/p>
&lt;p>&lt;img src="https://user-images.githubusercontent.com/5023721/93670586-fb077b80-face-11ea-9ef7-952761cc6f61.jpg" alt="ChainX_Bitcoin">&lt;/p>
&lt;p>由上图可以看到：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>前置条件：&lt;/p>
&lt;p>ChainX链上首先需要有信托生成对应的热冷信托多签地址。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>比特币区块头：&lt;/p>
&lt;ol>
&lt;li>比特币区块头由relay提交（也可以通过Substrate offchain worker 提交）&lt;/li>
&lt;li>比特币转接桥验证比特币区块头并组建比特币区块的最重工作量链。&lt;/li>
&lt;li>转接桥会根据最新的比特币区块头去确认在之前的某个区块为确认区块。&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>充值过程：&lt;/p>
&lt;ol>
&lt;li>链上首先具备区块；&lt;/li>
&lt;li>用户转账到信托的热地址，并在&lt;strong>交易中的OP_RETURN中携带用户的ChainX地址及其他信息&lt;/strong>，携带了信息比特币转接桥才可识别出这笔充值转账交易是与哪个ChainX用户相关；&lt;/li>
&lt;li>Relay发现这笔交易，并将这笔交易提交到转接桥中；（1.0中发现交易就可提交，直到确认才会执行，2.0中只能提交确认过的交易）&lt;/li>
&lt;li>当这笔交易是确认过的，执行这笔交易。当这笔交易是充值交易时，从OP_RETURN中解析出ChainX地址，发放对应的X-BTC金额至该ChainX账户；&lt;/li>
&lt;li>至此，比特币充值流程执行完毕。&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>提现过程：&lt;/p>
&lt;ol>
&lt;li>用户申请提现X-BTC；&lt;/li>
&lt;li>ChainX转接桥/网关模块中的记录模块会锁定对应的X-BTC并记录用户申请信息，该信息有唯一ID与其关联；&lt;/li>
&lt;li>信托周期性获取当前申请中的提现，并根据提现信息组件比特币提现交易原文；&lt;/li>
&lt;li>提现交易原文发送到ChainX比特币转接桥中后会锁定对应提现记录，之后其他的信托基于这个比特币原文进行比特币多签签名；&lt;/li>
&lt;li>签名完成后比特币交易会提交到比特币网络中；&lt;/li>
&lt;li>打包后relay会提交该提现交易至转接桥中，确认后会释放对应提现记录及销毁锁定的X-BTC；&lt;/li>
&lt;li>至此，比特币提现流程执行完毕。&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;h2 id="其他">其他&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>用户的比特币充值交易没有携带OP_RETURN，或OP_RETURN中解析不出有效的用户ChainX信息。&lt;/p>
&lt;p>对于这类问题，ChainX的比特币转接桥制定一种协议：&lt;/p>
&lt;blockquote>
&lt;p>比特币转接桥认为一笔对于ChainX的比特币充值交易，会与这笔比特币交易的&lt;strong>第一个input中含有的地址&lt;/strong>相关，这个地址的持有人一定具备这笔充值交易的控制权。&lt;/p>
&lt;/blockquote>
&lt;p>因此若交易中无法获取有效的ChainX用户信息，则会在ChainX的比特币转接桥中记录该交易的&lt;strong>第一个input的地址与这笔充值交易的一个关联关系&lt;/strong>，并称呼这种充值交易为“未认领充值交易”。&lt;/p>
&lt;p>当后续若出现使用这个相同地址作为第一个input地址的另一笔充值交易，且这笔充值交易携带有效的OP_RETURN信息能获取到对应的ChainX账户地址时，将会释放与这个地址相关的未认领充值交易至这个ChainX账户地址中。&lt;/p>
&lt;p>例如：&lt;/p>
&lt;p>假设有一笔交易tx1 为：&lt;/p>
&lt;pre>&lt;code>input1(address1) |---------|
input2(address2) |---------| output1 (信托地址) value 100000
&lt;/code>&lt;/pre>&lt;p>则这笔交易执行后将会在链上记录为：&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-rust" data-lang="rust">BtcAddress&lt;span style="color:#bbb"> &lt;/span>=&amp;gt;&lt;span style="color:#bbb"> &lt;/span>BtcDepositCache(tx_hash,&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#00d;font-weight:bold">100000&lt;/span>)&lt;span style="color:#bbb">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>当将来比特币转接桥收到了另一笔充值交易为：&lt;/p>
&lt;pre>&lt;code>input1(address1) |--------|
|--------| output1(信托地址) value 99999
|--------| output(OP_RETURN) =&amp;gt; ChainX address: 5Xxxxxxxxx
&lt;/code>&lt;/pre>&lt;p>此时将会给ChainX地址5Xxxxxxxxx 发放 &lt;code>100000 + 99999 = 199999&lt;/code> 的X-BTC，并移除与这个地址相关的未认领充值交易。&lt;/p>
&lt;/li>
&lt;/ol></description></item></channel></rss>